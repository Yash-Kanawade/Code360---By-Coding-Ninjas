Tabulation :-

import java.util.*;
import java.io.*;

public class Solution {
    public static String findLCS(int n, int m, String s1, String s2){
        
        String[][] dp = new String[n+1][m+1];
        return function(s1,s2,dp);
        
    }
    public static String function(String s1, String s2, String[][] dp){
        for(int i = 0 ; i < s1.length()+1; i++) 
            dp[i][0] = "";

        for(int j = 0 ; j < s2.length()+1; j++) 
            dp[0][j] = "";

        for(int i = 1 ; i < s1.length()+1; i++)
        {
            for(int j = 1 ; j < s2.length()+1 ;j++){
                if(s1.charAt(i-1) == s2.charAt(j-1))
                {
                    dp[i][j] = dp[i-1][j-1] + s1.charAt(i-1);
                }
                else{
                    String t1 = dp[i-1][j];
                    String t2 = dp[i][j-1];
                    if(t1.length() > t2.length())
                        dp[i][j] = t1 ;
                    else
                        dp[i][j] = t2 ;
                }
            }
        }
        
        return dp[s1.length()][s2.length()];
    }
}

Recursion and Memoiozation :-

import java.util.*;
import java.io.*;

public class Solution {
    public static String findLCS(int n, int m, String s1, String s2){
        
        String[][] dp = new String[n][m];
        for(String[] row : dp){
            Arrays.fill(row,"");
        }
        return function(n-1,m-1,s1,s2,dp);
        
    }
    public static String function(int i,int j,String s1, String s2, String[][] dp){
        if(i < 0 || j < 0)
            return "";
        if(dp[i][j] != ""){
            return dp[i][j];
        }
        if(s1.charAt(i) == s2.charAt(j))
        {
            dp[i][j] = function(i-1,j-1,s1,s2,dp) + s1.charAt(i) + dp[i][j];
        }
        else{
            String t1 = function(i-1,j,s1,s2,dp);
            String t2 =function(i,j-1,s1,s2,dp);
            if(t1.length() > t2.length())
                dp[i][j] = t1 + dp[i][j];
            else
                dp[i][j] = t2 + dp[i][j];
        }
        return dp[i][j];
    }
}
